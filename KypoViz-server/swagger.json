<<<<<<< HEAD
swagger: '2.0'
info:
  description: This is a simple API used to save game events data to a kypo backend server and send them to a visualization client application.
  version: 1.0.0
  title: Kypo visualization API
  # put the contact info for your development or API team
  contact:
    email: 422160@mail.muni.cz

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# all paths will be relative to the basePath specified
# basePath: /v1

# tags are used for organizing operations
tags:
- name: viz client
  description: Calls from JS client to get data
- name: kypolab backend
  description: Operations sending data to server
schemes:
- https
paths:
  /games/{playerID}:
    get:
      tags:
        - viz client
      summary: Retrieves all game instance IDs currently in the database
      description: |
        Get a list of all games/datasets currently in the database. Retrieves a list of unique game instance IDs.  
      produces:
      - application/json
      parameters:
      - name: playerID
        in: path
        description: If specified, the response contains only the games the specified player took part in. If empty, all distinct game IDs are returned.  
        required: true
        type: string
      responses:
        200:
          description: Array of strings representing game_instance_ID (s)
          examples:
            application/json: |-
              [
                "all-events",
                "test-data",
                "undefined",
                "bulk",
                "add-id-test",
                "st-polten"
              ]
  /events:
    get:
      tags:
      - viz client
      summary: retrieves events
      operationId: getEvents
      description: |
        You can get a specific filtered dataset by setting query parameters equivalent to SQL conditions in the database. You can combine different conditions.
      produces:
      - application/json
      parameters:
      - in: query
        name: game_instance_ID
        description: pass an optional search string to get events from a specific game (dataset), for example, 'st-polten'
        required: false
        type: string
      - in: query
        name: event
        description: pass an optional search string to get only events of a specific type, for example, 'Game started', 'Game finished', 'Correct flag submited', ...
        required: false
        type: string
      - in: query
        name: level
        description: Limit results to events during a specific level 1 through 6
        type: integer
        format: int32
        minimum: 1
      - in: query
        name: player_ID
        description: Limit results to events of specific player by passing in his/her ID, for example, '17158'
        type: integer
        format: int32
      responses:
        200:
          description: events results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
  /event:  
    post:
      tags:
      - kypolab backend
      summary: adds a new event to database
      operationId: addEvent
      description: Adds a new event tot the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: event
        description: Event to add
        schema:
          $ref: '#/definitions/Event'
      responses:
        200:
          description: Response body contains info whether the operation was successul or not. 
             TODO meaningful response codes
  /events-bulk/{gameID}:  
    post:
      tags:
      - kypolab backend
      summary: adds a new batch of events to the database
      operationId: addEventsBulk
      description: Adds a new array of events to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: events
        description: Events to add
        schema:
          type: array
          items: 
            $ref: '#/definitions/Event'
      - name: gameID
        in: path
        description: If your events to not contain the game_instance_ID property, you can send them anyway, just specify their game_instance_id as a URL parameter. It will be automatically added to all events that don't have a defined game_instance_id. If your data already is in the correct format, the parameter is not necessary. 
        required: true
        type: string
      responses:
        200:
          description: Response body contains info whether the operation was successul or not. 
             TODO meaningful response codes
definitions:
  Event:
    type: object
    required:
    - ID
    - timestamp
    - logical_time
    - level
    - event
    properties:
      ID:
        type: integer
        # format: uuid
        example: 57287
      timestamp:
        type: string
        example: '2016-04-07 06:52:43'
      logical_time:
        type: string
        example: 00:08:46
      level:
        type: string
        example: '2'
      event:
        type: string
        example: Correct flag submited
      game_instance_id:
        type: string
        example: st-polten
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /JuroUhlar/kypo-backend/1.0.0
=======
{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is a simple API used to save game events data to a kypo backend server and send them to a visualization client application.",
    "version" : "1.0.0",
    "title" : "Kypo visualization API",
    "contact" : {
      "email" : "422160@mail.muni.cz"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "viz client",
    "description" : "Calls from JS client to get data"
  }, {
    "name" : "kypolab backend",
    "description" : "Operations sending data to server"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/games/{playerID}" : {
      "get" : {
        "tags" : [ "viz client" ],
        "summary" : "Retrieves all game instance IDs currently in the database",
        "description" : "Get a list of all games/datasets currently in the database. Retrieves a list of unique game instance IDs.  \n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "playerID",
          "in" : "path",
          "description" : "If specified, the response contains only the games the specified player took part in. If empty, all distinct game IDs are returned.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Array of strings representing game_instance_ID (s)",
            "examples" : {
              "application/json" : "[\n  \"all-events\",\n  \"test-data\",\n  \"undefined\",\n  \"bulk\",\n  \"add-id-test\",\n  \"st-polten\"\n]"
            }
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "viz client" ],
        "summary" : "retrieves events",
        "operationId" : "getEvents",
        "description" : "You can get a specific filtered dataset by setting query parameters equivalent to SQL conditions in the database. You can combine different conditions.\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "game_instance_ID",
          "description" : "pass an optional search string to get events from a specific game (dataset), for example, 'st-polten'",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "query",
          "name" : "event",
          "description" : "pass an optional search string to get only events of a specific type, for example, 'Game started', 'Game finished', 'Correct flag submited', ...",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "query",
          "name" : "level",
          "description" : "Limit results to events during a specific level 1 through 6",
          "type" : "integer",
          "format" : "int32",
          "minimum" : 1
        }, {
          "in" : "query",
          "name" : "player_ID",
          "description" : "Limit results to events of specific player by passing in his/her ID, for example, '17158'",
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "events results matching criteria",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Event"
              }
            }
          }
        }
      }
    },
    "/event" : {
      "post" : {
        "tags" : [ "kypolab backend" ],
        "summary" : "adds a new event to database",
        "operationId" : "addEvent",
        "description" : "Adds a new event tot the system",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "event",
          "description" : "Event to add",
          "schema" : {
            "$ref" : "#/definitions/Event"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Response body contains info whether the operation was successul or not. TODO meaningful response codes"
          }
        }
      }
    },
    "/events-bulk/{gameID}" : {
      "post" : {
        "tags" : [ "kypolab backend" ],
        "summary" : "adds a new batch of events to the database",
        "operationId" : "addEventsBulk",
        "description" : "Adds a new array of events to the system",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "events",
          "description" : "Events to add",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Event"
            }
          }
        }, {
          "name" : "gameID",
          "in" : "path",
          "description" : "If your events to not contain the game_instance_ID property, you can send them anyway, just specify their game_instance_id as a URL parameter. It will be automatically added to all events that don't have a defined game_instance_id. If your data already is in the correct format, the parameter is not necessary.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response body contains info whether the operation was successul or not. TODO meaningful response codes"
          }
        }
      }
    }
  },
  "definitions" : {
    "Event" : {
      "type" : "object",
      "required" : [ "ID", "timestamp", "logical_time", "level", "event" ],
      "properties" : {
        "ID" : {
          "type" : "integer",
          "example" : 57287
        },
        "timestamp" : {
          "type" : "string",
          "example" : "2016-04-07 06:52:43"
        },
        "logical_time" : {
          "type" : "string",
          "example" : "00:08:46"
        },
        "level" : {
          "type" : "string",
          "example" : "2"
        },
        "event" : {
          "type" : "string",
          "example" : "Correct flag submited"
        },
        "game_instance_id" : {
          "type" : "string",
          "example" : "st-polten"
        }
      }
    }
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/JuroUhlar/kypo-backend/1.0.0"
}
>>>>>>> 89caaf9cc066dbca6948c695a413e5ca7f3182bc
